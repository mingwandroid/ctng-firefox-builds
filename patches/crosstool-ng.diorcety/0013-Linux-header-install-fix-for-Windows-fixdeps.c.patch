From 5da11d60b2ca5f367775917ec5556d2b37b36451 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Tue, 3 Dec 2013 00:16:22 +0000
Subject: [PATCH 13/38] Linux header install fix for Windows (fixdeps.c)

---
 .../3.10.19/100-fixdep-fixes-for-Windows.patch     | 154 ++++++++++++++++++++
 .../3.10.38/100-fixdep-fixes-for-Windows.patch     | 155 +++++++++++++++++++++
 .../linux/3.12/100-fixdep-fixes-for-Windows.patch  | 154 ++++++++++++++++++++
 3 files changed, 463 insertions(+)
 create mode 100644 patches/linux/3.10.19/100-fixdep-fixes-for-Windows.patch
 create mode 100644 patches/linux/3.10.38/100-fixdep-fixes-for-Windows.patch
 create mode 100644 patches/linux/3.12/100-fixdep-fixes-for-Windows.patch

diff --git a/patches/linux/3.10.19/100-fixdep-fixes-for-Windows.patch b/patches/linux/3.10.19/100-fixdep-fixes-for-Windows.patch
new file mode 100644
index 0000000..18ee6c8
--- /dev/null
+++ b/patches/linux/3.10.19/100-fixdep-fixes-for-Windows.patch
@@ -0,0 +1,154 @@
+--- linux-3.10.19.orig/scripts/basic/fixdep.c	2013-11-13 03:05:59.000000000 +0000
++++ linux-3.10.19/scripts/basic/fixdep.c	2013-12-04 00:21:00.303303000 +0000
+@@ -105,7 +105,9 @@
+ 
+ #include <sys/types.h>
+ #include <sys/stat.h>
++#ifndef __MINGW32__
+ #include <sys/mman.h>
++#endif
+ #include <unistd.h>
+ #include <fcntl.h>
+ #include <string.h>
+@@ -113,13 +115,77 @@
+ #include <stdio.h>
+ #include <limits.h>
+ #include <ctype.h>
++#ifndef __MINGW32__
+ #include <arpa/inet.h>
++#define O_BINARY 0
++#else
++inline unsigned int ntohl(unsigned int val);
++inline unsigned int ntohl(unsigned int val)
++{
++	return (((val&0xff      ) << 24) |
++			((val&0xff00    ) << 8 ) |
++			((val&0xff0000  ) >> 8 ) |
++			((val&0xff000000) >> 24) );
++}
++#endif
+ 
+ #define INT_CONF ntohl(0x434f4e46)
+ #define INT_ONFI ntohl(0x4f4e4649)
+ #define INT_NFIG ntohl(0x4e464947)
+ #define INT_FIG_ ntohl(0x4649475f)
+ 
++#ifdef __MINGW32__
++#define UNUSED __attribute__ ((__unused__))
++
++void *mmap(void *start UNUSED, size_t size, int prot UNUSED,
++	   int flags UNUSED, int fd, off_t offset UNUSED);
++
++void munmap(void *p, size_t size UNUSED);
++
++/* Workaround specifically for fixdep */
++#define PROT_READ 0
++#define MAP_PRIVATE 0
++void *mmap(void *start UNUSED, size_t size, int prot UNUSED,
++	   int flags UNUSED, int fd, off_t offset UNUSED)
++{
++	void *p;
++	void *curP;
++	ssize_t readB;
++
++	p = malloc(size);
++	if (!p)
++		return (void*)((long)-1);
++
++	curP = p;
++
++	while (size > 0)
++	{
++		readB = read(fd, curP, size);
++
++		if (readB == 0)
++		{
++			/* EOF reached */
++			break;
++		}
++		else if (readB < 0)
++		{
++			perror("fixdep: read config");
++			free(p);
++			return (void*)((long)-1);
++		}
++
++		size -= readB;
++		curP += readB;
++	}
++
++	return p;
++}
++void munmap(void *p, size_t size UNUSED)
++{
++	free(p);
++}
++#endif
++
+ char *target;
+ char *depfile;
+ char *cmdline;
+@@ -284,7 +350,7 @@
+ 	int fd;
+ 	void *map;
+ 
+-	fd = open(filename, O_RDONLY);
++	fd = open(filename, O_RDONLY|O_BINARY);
+ 	if (fd < 0) {
+ 		fprintf(stderr, "fixdep: error opening config file: ");
+ 		perror(filename);
+@@ -319,6 +385,7 @@
+ 	char *m = map;
+ 	char *end = m + len;
+ 	char *p;
++	char *slash;
+ 	char s[PATH_MAX];
+ 	int is_target;
+ 	int saw_any_target = 0;
+@@ -328,11 +395,11 @@
+ 
+ 	while (m < end) {
+ 		/* Skip any "white space" */
+-		while (m < end && (*m == ' ' || *m == '\\' || *m == '\n'))
++		while (m < end && (*m == ' ' || *m == '\\' || *m == '\r' || *m == '\n'))
+ 			m++;
+ 		/* Find next "white space" */
+ 		p = m;
+-		while (p < end && *p != ' ' && *p != '\\' && *p != '\n')
++		while (p < end && *p != ' ' && *p != '\r' && *p != '\n')
+ 			p++;
+ 		/* Is the token we found a target name? */
+ 		is_target = (*(p-1) == ':');
+@@ -344,6 +411,14 @@
+ 			/* Save this token/filename */
+ 			memcpy(s, m, p-m);
+ 			s[p - m] = 0;
++			/* Apply some Windows fixups */
++			if (s[0]>='a' && s[0]<='z' && s[1]==':')
++				s[0] = s[0]&~32;
++			slash = strchr(s, '\\');
++			while (slash) {
++				*slash = '/';
++				slash = strchr(slash, '\\');
++			}
+ 
+ 			/* Ignore certain dependencies */
+ 			if (strrcmp(s, "include/generated/autoconf.h") &&
+@@ -385,6 +460,8 @@
+ 		 * "whitespace" character that follows this token.
+ 		 */
+ 		m = p + 1;
++		while (*m && (*m == '\r' || *m == '\n'))
++			++m;
+ 	}
+ 
+ 	if (!saw_any_target) {
+@@ -402,7 +479,7 @@
+ 	int fd;
+ 	void *map;
+ 
+-	fd = open(depfile, O_RDONLY);
++	fd = open(depfile, O_RDONLY|O_BINARY);
+ 	if (fd < 0) {
+ 		fprintf(stderr, "fixdep: error opening depfile: ");
+ 		perror(depfile);
diff --git a/patches/linux/3.10.38/100-fixdep-fixes-for-Windows.patch b/patches/linux/3.10.38/100-fixdep-fixes-for-Windows.patch
new file mode 100644
index 0000000..7a09213
--- /dev/null
+++ b/patches/linux/3.10.38/100-fixdep-fixes-for-Windows.patch
@@ -0,0 +1,155 @@
+diff -urN linux-3.10.38.orig/scripts/basic/fixdep.c linux-3.10.38/scripts/basic/fixdep.c
+--- linux-3.10.38.orig/scripts/basic/fixdep.c	2014-04-27 01:16:33.000000000 +0100
++++ linux-3.10.38/scripts/basic/fixdep.c	2014-07-16 21:57:40.209754200 +0100
+@@ -105,7 +105,9 @@
+ 
+ #include <sys/types.h>
+ #include <sys/stat.h>
++#ifndef __MINGW32__
+ #include <sys/mman.h>
++#endif
+ #include <unistd.h>
+ #include <fcntl.h>
+ #include <string.h>
+@@ -113,13 +115,77 @@
+ #include <stdio.h>
+ #include <limits.h>
+ #include <ctype.h>
++#ifndef __MINGW32__
+ #include <arpa/inet.h>
++#define O_BINARY 0
++#else
++inline unsigned int ntohl(unsigned int val);
++inline unsigned int ntohl(unsigned int val)
++{
++	return (((val&0xff      ) << 24) |
++			((val&0xff00    ) << 8 ) |
++			((val&0xff0000  ) >> 8 ) |
++			((val&0xff000000) >> 24) );
++}
++#endif
+ 
+ #define INT_CONF ntohl(0x434f4e46)
+ #define INT_ONFI ntohl(0x4f4e4649)
+ #define INT_NFIG ntohl(0x4e464947)
+ #define INT_FIG_ ntohl(0x4649475f)
+ 
++#ifdef __MINGW32__
++#define UNUSED __attribute__ ((__unused__))
++
++void *mmap(void *start UNUSED, size_t size, int prot UNUSED,
++	   int flags UNUSED, int fd, off_t offset UNUSED);
++
++void munmap(void *p, size_t size UNUSED);
++
++/* Workaround specifically for fixdep */
++#define PROT_READ 0
++#define MAP_PRIVATE 0
++void *mmap(void *start UNUSED, size_t size, int prot UNUSED,
++	   int flags UNUSED, int fd, off_t offset UNUSED)
++{
++	void *p;
++	void *curP;
++	ssize_t readB;
++
++	p = malloc(size);
++	if (!p)
++		return (void*)((long)-1);
++
++	curP = p;
++
++	while (size > 0)
++	{
++		readB = read(fd, curP, size);
++
++		if (readB == 0)
++		{
++			/* EOF reached */
++			break;
++		}
++		else if (readB < 0)
++		{
++			perror("fixdep: read config");
++			free(p);
++			return (void*)((long)-1);
++		}
++
++		size -= readB;
++		curP += readB;
++	}
++
++	return p;
++}
++void munmap(void *p, size_t size UNUSED)
++{
++	free(p);
++}
++#endif
++
+ char *target;
+ char *depfile;
+ char *cmdline;
+@@ -284,7 +350,7 @@
+ 	int fd;
+ 	void *map;
+ 
+-	fd = open(filename, O_RDONLY);
++	fd = open(filename, O_RDONLY|O_BINARY);
+ 	if (fd < 0) {
+ 		fprintf(stderr, "fixdep: error opening config file: ");
+ 		perror(filename);
+@@ -319,6 +385,7 @@
+ 	char *m = map;
+ 	char *end = m + len;
+ 	char *p;
++	char *slash;
+ 	char s[PATH_MAX];
+ 	int is_target;
+ 	int saw_any_target = 0;
+@@ -328,11 +395,11 @@
+ 
+ 	while (m < end) {
+ 		/* Skip any "white space" */
+-		while (m < end && (*m == ' ' || *m == '\\' || *m == '\n'))
++		while (m < end && (*m == ' ' || *m == '\\' || *m == '\r' || *m == '\n'))
+ 			m++;
+ 		/* Find next "white space" */
+ 		p = m;
+-		while (p < end && *p != ' ' && *p != '\\' && *p != '\n')
++		while (p < end && *p != ' ' && *p != '\r' && *p != '\n')
+ 			p++;
+ 		/* Is the token we found a target name? */
+ 		is_target = (*(p-1) == ':');
+@@ -344,6 +411,14 @@
+ 			/* Save this token/filename */
+ 			memcpy(s, m, p-m);
+ 			s[p - m] = 0;
++			/* Apply some Windows fixups */
++			if (s[0]>='a' && s[0]<='z' && s[1]==':')
++				s[0] = s[0]&~32;
++			slash = strchr(s, '\\');
++			while (slash) {
++				*slash = '/';
++				slash = strchr(slash, '\\');
++			}
+ 
+ 			/* Ignore certain dependencies */
+ 			if (strrcmp(s, "include/generated/autoconf.h") &&
+@@ -385,6 +460,8 @@
+ 		 * "whitespace" character that follows this token.
+ 		 */
+ 		m = p + 1;
++		while (*m && (*m == '\r' || *m == '\n'))
++			++m;
+ 	}
+ 
+ 	if (!saw_any_target) {
+@@ -402,7 +479,7 @@
+ 	int fd;
+ 	void *map;
+ 
+-	fd = open(depfile, O_RDONLY);
++	fd = open(depfile, O_RDONLY|O_BINARY);
+ 	if (fd < 0) {
+ 		fprintf(stderr, "fixdep: error opening depfile: ");
+ 		perror(depfile);
diff --git a/patches/linux/3.12/100-fixdep-fixes-for-Windows.patch b/patches/linux/3.12/100-fixdep-fixes-for-Windows.patch
new file mode 100644
index 0000000..8b6b901
--- /dev/null
+++ b/patches/linux/3.12/100-fixdep-fixes-for-Windows.patch
@@ -0,0 +1,154 @@
+--- linux-3.12.orig/scripts/basic/fixdep.c	2013-11-13 03:05:59.000000000 +0000
+--- linux-3.12/scripts/basic/fixdep.c	2013-12-04 00:21:00.303303000 +0000
+@@ -105,7 +105,9 @@
+ 
+ #include <sys/types.h>
+ #include <sys/stat.h>
++#ifndef __MINGW32__
+ #include <sys/mman.h>
++#endif
+ #include <unistd.h>
+ #include <fcntl.h>
+ #include <string.h>
+@@ -113,13 +115,77 @@
+ #include <stdio.h>
+ #include <limits.h>
+ #include <ctype.h>
++#ifndef __MINGW32__
+ #include <arpa/inet.h>
++#define O_BINARY 0
++#else
++inline unsigned int ntohl(unsigned int val);
++inline unsigned int ntohl(unsigned int val)
++{
++	return (((val&0xff      ) << 24) |
++			((val&0xff00    ) << 8 ) |
++			((val&0xff0000  ) >> 8 ) |
++			((val&0xff000000) >> 24) );
++}
++#endif
+ 
+ #define INT_CONF ntohl(0x434f4e46)
+ #define INT_ONFI ntohl(0x4f4e4649)
+ #define INT_NFIG ntohl(0x4e464947)
+ #define INT_FIG_ ntohl(0x4649475f)
+ 
++#ifdef __MINGW32__
++#define UNUSED __attribute__ ((__unused__))
++
++void *mmap(void *start UNUSED, size_t size, int prot UNUSED,
++	   int flags UNUSED, int fd, off_t offset UNUSED);
++
++void munmap(void *p, size_t size UNUSED);
++
++/* Workaround specifically for fixdep */
++#define PROT_READ 0
++#define MAP_PRIVATE 0
++void *mmap(void *start UNUSED, size_t size, int prot UNUSED,
++	   int flags UNUSED, int fd, off_t offset UNUSED)
++{
++	void *p;
++	void *curP;
++	ssize_t readB;
++
++	p = malloc(size);
++	if (!p)
++		return (void*)((long)-1);
++
++	curP = p;
++
++	while (size > 0)
++	{
++		readB = read(fd, curP, size);
++
++		if (readB == 0)
++		{
++			/* EOF reached */
++			break;
++		}
++		else if (readB < 0)
++		{
++			perror("fixdep: read config");
++			free(p);
++			return (void*)((long)-1);
++		}
++
++		size -= readB;
++		curP += readB;
++	}
++
++	return p;
++}
++void munmap(void *p, size_t size UNUSED)
++{
++	free(p);
++}
++#endif
++
+ char *target;
+ char *depfile;
+ char *cmdline;
+@@ -284,7 +350,7 @@
+ 	int fd;
+ 	void *map;
+ 
+-	fd = open(filename, O_RDONLY);
++	fd = open(filename, O_RDONLY|O_BINARY);
+ 	if (fd < 0) {
+ 		fprintf(stderr, "fixdep: error opening config file: ");
+ 		perror(filename);
+@@ -319,6 +385,7 @@
+ 	char *m = map;
+ 	char *end = m + len;
+ 	char *p;
++	char *slash;
+ 	char s[PATH_MAX];
+ 	int is_target;
+ 	int saw_any_target = 0;
+@@ -328,11 +395,11 @@
+ 
+ 	while (m < end) {
+ 		/* Skip any "white space" */
+-		while (m < end && (*m == ' ' || *m == '\\' || *m == '\n'))
++		while (m < end && (*m == ' ' || *m == '\\' || *m == '\r' || *m == '\n'))
+ 			m++;
+ 		/* Find next "white space" */
+ 		p = m;
+-		while (p < end && *p != ' ' && *p != '\\' && *p != '\n')
++		while (p < end && *p != ' ' && *p != '\r' && *p != '\n')
+ 			p++;
+ 		/* Is the token we found a target name? */
+ 		is_target = (*(p-1) == ':');
+@@ -344,6 +411,14 @@
+ 			/* Save this token/filename */
+ 			memcpy(s, m, p-m);
+ 			s[p - m] = 0;
++			/* Apply some Windows fixups */
++			if (s[0]>='a' && s[0]<='z' && s[1]==':')
++				s[0] = s[0]&~32;
++			slash = strchr(s, '\\');
++			while (slash) {
++				*slash = '/';
++				slash = strchr(slash, '\\');
++			}
+ 
+ 			/* Ignore certain dependencies */
+ 			if (strrcmp(s, "include/generated/autoconf.h") &&
+@@ -385,6 +460,8 @@
+ 		 * "whitespace" character that follows this token.
+ 		 */
+ 		m = p + 1;
++		while (*m && (*m == '\r' || *m == '\n'))
++			++m;
+ 	}
+ 
+ 	if (!saw_any_target) {
+@@ -402,7 +479,7 @@
+ 	int fd;
+ 	void *map;
+ 
+-	fd = open(depfile, O_RDONLY);
++	fd = open(depfile, O_RDONLY|O_BINARY);
+ 	if (fd < 0) {
+ 		fprintf(stderr, "fixdep: error opening depfile: ");
+ 		perror(depfile);
-- 
2.1.3


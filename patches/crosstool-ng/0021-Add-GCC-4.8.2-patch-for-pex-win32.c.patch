From 946a918194373648d64571ddca7ebfdf7a166437 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sun, 22 Dec 2013 03:00:07 +0000
Subject: [PATCH 21/21] Add GCC 4.8.2 patch for pex-win32.c

.. it always quoted all arguments, irrespective of whether
there was a need to. This meant the 32k limit was being
hit during builds of cross libgcc by both xgcc.exe and
collect2.exe
---
 ...rguments-that-dont-need-it-in-pex-win32.c.patch | 86 ++++++++++++++++++++++
 1 file changed, 86 insertions(+)
 create mode 100644 patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch

diff --git a/patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch b/patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
new file mode 100644
index 0000000..e2a3fae
--- /dev/null
+++ b/patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
@@ -0,0 +1,86 @@
+diff -urN gcc-4.8.2.orig/libiberty/pex-win32.c gcc-4.8.2/libiberty/pex-win32.c
+--- gcc-4.8.2.orig/libiberty/pex-win32.c	2013-12-21 20:21:26.446076700 +0000
++++ gcc-4.8.2/libiberty/pex-win32.c	2013-12-22 02:56:54.800559500 +0000
+@@ -340,17 +340,26 @@
+   char *p;
+   size_t cmdline_len;
+   int i, j, k;
++  int needs_quotes;
+ 
+   cmdline_len = 0;
+   for (i = 0; argv[i]; i++)
+     {
+-      /* We quote every last argument.  This simplifies the problem;
+-	 we need only escape embedded double-quotes and immediately
++      /* We only quote arguments that contain spaces, \n \t \v or " characters
++	 to prevent wasting 2 chars per argument of the CreateProcess 32k char limit
++	 We need only escape embedded double-quotes and immediately
+ 	 preceeding backslash characters.  A sequence of backslach characters
+ 	 that is not follwed by a double quote character will not be
+ 	 escaped.  */
++      needs_quotes = 0;
+       for (j = 0; argv[i][j]; j++)
+ 	{
++	  if (argv[i][j] == ' '  || argv[i][j] == '\n' ||
++	      argv[i][j] == '\t' || argv[i][j] == '"' )
++	    {
++	      needs_quotes = 1;
++	    }
++
+ 	  if (argv[i][j] == '"')
+ 	    {
+ 	      /* Escape preceeding backslashes.  */
+@@ -362,16 +371,33 @@
+ 	}
+       /* Trailing backslashes also need to be escaped because they will be
+          followed by the terminating quote.  */
+-      for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
+-	cmdline_len++;
++      if (needs_quotes)
++        {
++          for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
++            cmdline_len++;
++        }
+       cmdline_len += j;
+-      cmdline_len += 3;  /* for leading and trailing quotes and space */
++      cmdline_len += 1 + (needs_quotes<<1);  /* for leading and trailing quotes and space */
+     }
+   cmdline = XNEWVEC (char, cmdline_len);
+   p = cmdline;
+   for (i = 0; argv[i]; i++)
+     {
+-      *p++ = '"';
++      needs_quotes = 0;
++      for (j = 0; argv[i][j]; j++)
++        {
++          if (argv[i][j] == ' '  || argv[i][j] == '\n' ||
++              argv[i][j] == '\t' || argv[i][j] == '"' )
++            {
++              needs_quotes = 1;
++              break;
++            }
++        }
++
++      if (needs_quotes)
++        {
++          *p++ = '"';
++        }
+       for (j = 0; argv[i][j]; j++)
+ 	{
+ 	  if (argv[i][j] == '"')
+@@ -382,9 +408,12 @@
+ 	    }
+ 	  *p++ = argv[i][j];
+ 	}
+-      for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
+-	*p++ = '\\';
+-      *p++ = '"';
++      if (needs_quotes)
++        {
++          for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
++            *p++ = '\\';
++          *p++ = '"';
++        }
+       *p++ = ' ';
+     }
+   p[-1] = '\0';
-- 
1.8.5.2


From 43ad53a842b1cb2281abe94400467b07b9444eeb Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sun, 22 Dec 2013 03:00:07 +0000
Subject: [PATCH 20/37] Add GCC 4.8.2 patch for pex-win32.c

.. it always quoted all arguments, irrespective of whether
there was a need to. This meant the 32k limit was being
hit during builds of cross libgcc by both xgcc.exe and
collect2.exe
---
 ...rguments-that-dont-need-it-in-pex-win32.c.patch | 106 +++++++++++++++++++++
 1 file changed, 106 insertions(+)
 create mode 100644 patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch

diff --git a/patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch b/patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
new file mode 100644
index 0000000..b38052a
--- /dev/null
+++ b/patches/gcc/4.8.2/130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch
@@ -0,0 +1,106 @@
+From c48bb2589b94c1b772e99f794efed8dde7a67b19 Mon Sep 17 00:00:00 2001
+From: Ray Donnelly <mingw.android@gmail.com>
+Date: Tue, 1 Apr 2014 23:17:48 +0100
+Subject: [PATCH 1/4] 2014-04-03  Ray Donnelly <mingw.android@gmail.com>
+
+We only quote arguments that contain spaces, \n \t \v
+or " characters to prevent wasting 2 characters per
+argument of the CreateProcess() 32,768 limit.
+
+libiberty/
+	* pex-win32.c (argv_to_cmdline): Don't quote
+	args unnecessarily
+---
+ libiberty/pex-win32.c | 47 ++++++++++++++++++++++++++++++++++++++---------
+ 1 file changed, 38 insertions(+), 9 deletions(-)
+
+diff --git a/libiberty/pex-win32.c b/libiberty/pex-win32.c
+index eae72c5..c37fb9f 100644
+--- a/libiberty/pex-win32.c
++++ b/libiberty/pex-win32.c
+@@ -340,17 +340,26 @@ argv_to_cmdline (char *const *argv)
+   char *p;
+   size_t cmdline_len;
+   int i, j, k;
++  int needs_quotes;
+ 
+   cmdline_len = 0;
+   for (i = 0; argv[i]; i++)
+     {
+-      /* We quote every last argument.  This simplifies the problem;
+-	 we need only escape embedded double-quotes and immediately
++      /* We only quote arguments that contain spaces, \n \t \v or " characters
++	 to prevent wasting 2 chars per argument of the CreateProcess 32k char limit
++	 We need only escape embedded double-quotes and immediately
+ 	 preceeding backslash characters.  A sequence of backslach characters
+ 	 that is not follwed by a double quote character will not be
+ 	 escaped.  */
++      needs_quotes = 0;
+       for (j = 0; argv[i][j]; j++)
+ 	{
++	  if (argv[i][j] == ' '  || argv[i][j] == '\n' ||
++	      argv[i][j] == '\t' || argv[i][j] == '"' )
++	    {
++	      needs_quotes = 1;
++	    }
++
+ 	  if (argv[i][j] == '"')
+ 	    {
+ 	      /* Escape preceeding backslashes.  */
+@@ -362,16 +371,33 @@ argv_to_cmdline (char *const *argv)
+ 	}
+       /* Trailing backslashes also need to be escaped because they will be
+          followed by the terminating quote.  */
+-      for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
+-	cmdline_len++;
++      if (needs_quotes)
++        {
++          for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
++            cmdline_len++;
++        }
+       cmdline_len += j;
+-      cmdline_len += 3;  /* for leading and trailing quotes and space */
++      cmdline_len += needs_quotes * 2 + 1;  /* for leading and trailing quotes and space */
+     }
+   cmdline = XNEWVEC (char, cmdline_len);
+   p = cmdline;
+   for (i = 0; argv[i]; i++)
+     {
+-      *p++ = '"';
++      needs_quotes = 0;
++      for (j = 0; argv[i][j]; j++)
++        {
++          if (argv[i][j] == ' '  || argv[i][j] == '\n' ||
++              argv[i][j] == '\t' || argv[i][j] == '"' )
++            {
++              needs_quotes = 1;
++              break;
++            }
++        }
++
++      if (needs_quotes)
++        {
++          *p++ = '"';
++        }
+       for (j = 0; argv[i][j]; j++)
+ 	{
+ 	  if (argv[i][j] == '"')
+@@ -382,9 +408,12 @@ argv_to_cmdline (char *const *argv)
+ 	    }
+ 	  *p++ = argv[i][j];
+ 	}
+-      for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
+-	*p++ = '\\';
+-      *p++ = '"';
++      if (needs_quotes)
++        {
++          for (k = j - 1; k >= 0 && argv[i][k] == '\\'; k--)
++            *p++ = '\\';
++          *p++ = '"';
++        }
+       *p++ = ' ';
+     }
+   p[-1] = '\0';
+-- 
+1.9.0
+
-- 
1.9.2


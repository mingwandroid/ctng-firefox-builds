From 5318531850e049fd138fe1f54fdff6e4919f606a Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Mon, 23 Dec 2013 13:41:25 +0000
Subject: [PATCH 21/38] Add GCC 4.8.2 patch for files.c

.. On Windows (MiNGW-w64 and Cygwin) non-existant dirs
that are stepped out of via '..' are not considered a
problem and files can be returned to live in them via
open(), so if there are any '..' directories then take
a more thurough code-path to check each dir in the chain
exists.
---
 ...dows-not-minding-non-existant-parent-dirs.patch | 138 +++++++++++++++++++++
 1 file changed, 138 insertions(+)
 create mode 100644 patches/gcc/4.8.2/140-fix-for-windows-not-minding-non-existant-parent-dirs.patch

diff --git a/patches/gcc/4.8.2/140-fix-for-windows-not-minding-non-existant-parent-dirs.patch b/patches/gcc/4.8.2/140-fix-for-windows-not-minding-non-existant-parent-dirs.patch
new file mode 100644
index 0000000..022c35c
--- /dev/null
+++ b/patches/gcc/4.8.2/140-fix-for-windows-not-minding-non-existant-parent-dirs.patch
@@ -0,0 +1,138 @@
+From f67f599fc648d68b5caa60825c3ca34f395d90c9 Mon Sep 17 00:00:00 2001
+From: Ray Donnelly <mingw.android@gmail.com>
+Date: Tue, 1 Apr 2014 23:20:18 +0100
+Subject: [PATCH 2/4] 2014-04-03  Ray Donnelly <mingw.android@gmail.com>
+
+Make Windows 'path exists' semantics more Posix-like
+
+Windows does a short-circuit lookup of paths containing
+../ which means that:
+
+exists/doesnotexist/../file
+
+is considered to exist, while on Posix it is considered
+not to. The Posix semantics are relied upon when building
+glibc so any paths containing "../" are checked component
+wise.
+
+libcpp/
+	* files.c (open_file): Implement Posix existence
+	semantics for paths containing '../'
+---
+ libcpp/files.c | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ 1 file changed, 86 insertions(+)
+
+diff --git a/libcpp/files.c b/libcpp/files.c
+index 7e88778..9ea8caa 100644
+--- a/libcpp/files.c
++++ b/libcpp/files.c
+@@ -30,6 +30,13 @@ along with this program; see the file COPYING3.  If not see
+ #include "md5.h"
+ #include <dirent.h>
+ 
++/* Needed for stat_st_mode_symlink below */
++#if defined(_WIN32)
++#  include <windows.h>
++#  define S_IFLNK 0xF000
++#  define S_ISLNK(m) (((m) & S_IFMT) == S_IFLNK)
++#endif
++
+ /* Variable length record files on VMS will have a stat size that includes
+    record control characters that won't be included in the read size.  */
+ #ifdef VMS
+@@ -198,6 +205,49 @@ static int pchf_save_compare (const void *e1, const void *e2);
+ static int pchf_compare (const void *d_p, const void *e_p);
+ static bool check_file_against_entries (cpp_reader *, _cpp_file *, bool);
+ 
++#if defined(_WIN32)
++
++static int stat_st_mode_symlink (char const* path, struct stat* buf)
++{
++  WIN32_FILE_ATTRIBUTE_DATA attr;
++  memset(buf, 0, sizeof(*buf));
++  int err = GetFileAttributesExA (path, GetFileExInfoStandard, &attr) ? 0 : 1;
++  if (!err)
++    {
++      WIN32_FIND_DATAA finddata;
++      HANDLE h = FindFirstFileA (path, &finddata);
++      if (h != INVALID_HANDLE_VALUE)
++        {
++          FindClose (h);
++          if ((finddata.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) &&
++              (finddata.dwReserved0 == IO_REPARSE_TAG_SYMLINK))
++              buf->st_mode = S_IFLNK;
++          else if (finddata.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
++              buf->st_mode = S_IFDIR;
++          else if (finddata.dwFileAttributes & FILE_ATTRIBUTE_ARCHIVE)
++              buf->st_mode = S_IFDIR;
++          else
++              buf->st_mode = S_IFREG;
++          buf->st_mode |= S_IREAD;
++          if (!(finddata.dwFileAttributes & FILE_ATTRIBUTE_READONLY))
++              buf->st_mode |= S_IWRITE;
++        }
++      else
++        {
++          buf->st_mode = S_IFDIR;
++        }
++      return 0;
++    }
++  return -1;
++}
++
++#else
++
++#define stat_st_mode_symlink (_name, _buf) stat ((_name), (_buf))
++
++#endif
++
++
+ /* Given a filename in FILE->PATH, with the empty string interpreted
+    as <stdin>, open it.
+ 
+@@ -227,6 +277,42 @@ open_file (_cpp_file *file)
+     }
+   else
+     file->fd = open (file->path, O_RDONLY | O_NOCTTY | O_BINARY, 0666);
++#if defined(_WIN32) || defined(__CYGWIN__)
++  /* Windows and Posix differ in the face of paths of the form:
++     nonexistantdir/.. in that Posix will return ENOENT whereas
++     Windows won't care that we stepped into a non-existant dir
++     Only do these slow checks if ".." appears in file->path.
++     Cygwin also suffers from the same problem (but doesn't need
++     a new stat function):
++     http://cygwin.com/ml/cygwin/2013-05/msg00222.html
++  */
++  if (file->fd > 0)
++    {
++      char filepath[MAX_PATH];
++      strncpy (filepath, file->path, MAX_PATH);
++      filepath[MAX_PATH-1] = (char) 0;
++      char *dirsep = &filepath[0];
++      while ( (dirsep = strchr (dirsep, '\\')) != NULL)
++        *dirsep = '/';
++      if (strstr(filepath, "../"))
++	{
++	  dirsep = &filepath[0];
++	  /* Check each directory in the chain. */
++	  while ( (dirsep = strchr (dirsep, '/')) != NULL)
++	    {
++	      *dirsep = (char) 0;
++	      if (stat_st_mode_symlink (filepath, &file->st) == -1)
++	        {
++	          *dirsep = '/';
++	          close (file->fd);
++	          file->fd = -1;
++	          return false;
++	        }
++	      *dirsep++ = '/';
++	    }
++	}
++    }
++#endif
+ 
+   if (file->fd != -1)
+     {
+-- 
+1.9.0
+
-- 
2.0.1


From 0f201933aa8986340649dd4d7883da506971163f Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 20 Nov 2013 21:19:23 +0000
Subject: [PATCH 2/5] Fix various multilib build bugs

--host=${CT_TARGET} with eg -m32 is not right.
The arch part must be correct (i686 for 32-bit
and x86_64 for 64-bit). Un-fortunately GCC has
no mechanism for returning each arches triplet
so instead some hacks are used. Debian can ask
"gcc -m32 -print-multiarch" but this flag isnt
provided on other GCC builds.

The old symlinks from lib32/64 to lib are only
made if CT_MULTILIB=n, and the comment that we
are not multilib on the target side corrected.

The stub libc.so is compiled with extra_cflags
so that it is for the correct multilib arch.

The stub libc.so and crt*.o files are moved to
the multilib os directory and not the multilib
directory if gcc arg -print-multi-os-directory
is supported.

--libdir=<> is passed to libc's configure such
that it is made inplace in the multilib-os dir
and 'Fixing up multilib location' is no longer
required.

Before starting the build of the 2nd stage GCC,
as well as copying the headers, it is necessary
to also copy the start libraries and stub libc.
copy_headers is renamed to copy_minimal_sysroot
and find is used to copy ${CT_SYSROOT_DIR}/lib*
and ${CT_SYSROOT_DIR}/include otherwise linking
libgcc_s.so fails since GCC "cannot find -lc".

ranlib was added to binutils tools list to make
available to the core C compiler because static
libraries are built and ranlib is used on them.
---
 scripts/build/binutils/binutils.sh        |   6 +-
 scripts/build/cc/100-gcc.sh               |  21 ++++--
 scripts/build/cc/llvmgcc.sh               |  20 ++++--
 scripts/build/libc/glibc-eglibc.sh-common | 104 ++++++++++++++++++------------
 scripts/crosstool-NG.sh.in                |  25 +++----
 5 files changed, 108 insertions(+), 68 deletions(-)

diff --git a/scripts/build/binutils/binutils.sh b/scripts/build/binutils/binutils.sh
index d973594..4a052ad 100644
--- a/scripts/build/binutils/binutils.sh
+++ b/scripts/build/binutils/binutils.sh
@@ -106,13 +106,13 @@ do_binutils_for_host() {
     fi
 
     # Make those new tools available to the core C compilers to come.
-    # Note: some components want the ${TARGET}-{ar,as,ld,strip} commands as
-    # well. Create that.
+    # Note: some components want the ${TARGET}-{ar,as,ld,ranlib,strip} commands
+    # as well. Create that.
     # Don't do it for canadian or cross-native, because the binutils
     # are not executable on the build machine.
     case "${CT_TOOLCHAIN_TYPE}" in
         cross|native)
-            binutils_tools=( ar as ld strip )
+            binutils_tools=( ar as ld ranlib strip )
             if [ -n "${CT_ARCH_BINFMT_FLAT}" ]; then
                 binutils_tools+=( elf2flt flthdr )
             fi
diff --git a/scripts/build/cc/100-gcc.sh b/scripts/build/cc/100-gcc.sh
index ede8cc5..fa31646 100644
--- a/scripts/build/cc/100-gcc.sh
+++ b/scripts/build/cc/100-gcc.sh
@@ -189,6 +189,7 @@ do_gcc_core_backend() {
     local -a core_targets
     local arg
     local exeext
+    local sysroot_dirs
 
     for arg in "$@"; do
         eval "${arg// /\\ }"
@@ -201,18 +202,18 @@ do_gcc_core_backend() {
             extra_config+=("--with-newlib")
             extra_config+=("--enable-threads=no")
             extra_config+=("--disable-shared")
-            copy_headers=y  # For baremetal, as there's no headers to copy,
-                            # we copy an empty directory. So, who cares?
+            copy_minimal_sysroot=y  # For baremetal, as there's no minimal sysroot to copy,
+                                    # we copy some empty directories. So, who cares?
             ;;
         shared)
             extra_config+=("--enable-shared")
-            copy_headers=y
+            copy_minimal_sysroot=y
             ;;
         baremetal)
             extra_config+=("--with-newlib")
             extra_config+=("--enable-threads=no")
             extra_config+=("--disable-shared")
-            copy_headers=n
+            copy_minimal_sysroot=n
             ;;
         *)
             CT_Abort "Internal Error: 'mode' must be one of: 'static', 'shared' or 'baremetal', not '${mode:-(empty)}'"
@@ -225,9 +226,14 @@ do_gcc_core_backend() {
         [ -n "${CT_TOOLCHAIN_BUGURL}" ] && extra_config+=("--with-bugurl=${CT_TOOLCHAIN_BUGURL}")
     fi
 
-    if [ "${copy_headers}" = "y" ]; then
-        CT_DoLog DEBUG "Copying headers to install area of bootstrap gcc, so it can build libgcc2"
-        CT_DoExecLog ALL cp -a "${CT_HEADERS_DIR}" "${prefix}/${CT_TARGET}/include"
+    if [ "${copy_minimal_sysroot}" = "y" ]; then
+        CT_DoLog DEBUG "Copying headers and libs to install area of bootstrap gcc, so it can build libgcc2"
+        CT_Pushd "${CT_SYSROOT_DIR}"
+        sysroot_dirs=$(find -mindepth 1 -maxdepth 1 -type d \( -name "lib*" -or -name "include" \) -printf '%f\n')
+        for sysroot_dir in $sysroot_dirs; do
+          CT_DoExecLog ALL cp -a "${CT_SYSROOT_DIR}/${sysroot_dir}" "${prefix}/${CT_TARGET}/${sysroot_dir}"
+        done
+        CT_Popd
     fi
 
     for tmp in ARCH ABI CPU TUNE FPU FLOAT; do
@@ -364,6 +370,7 @@ do_gcc_core_backend() {
 
     if [ "${CT_MULTILIB}" = "y" ]; then
         extra_config+=("--enable-multilib")
+        extra_config+=("--enable-targets=all")
     else
         extra_config+=("--disable-multilib")
     fi
diff --git a/scripts/build/cc/llvmgcc.sh b/scripts/build/cc/llvmgcc.sh
index 6d82a7d..3c3348c 100644
--- a/scripts/build/cc/llvmgcc.sh
+++ b/scripts/build/cc/llvmgcc.sh
@@ -161,6 +161,7 @@ do_llvmgcc_core_backend() {
     local -a core_targets
     local arg
     local exeext
+    local sysroot_dirs
 
     for arg in "$@"; do
         eval "${arg// /\\ }"
@@ -173,18 +174,18 @@ do_llvmgcc_core_backend() {
             extra_config+=("--with-newlib")
             extra_config+=("--enable-threads=no")
             extra_config+=("--disable-shared")
-            copy_headers=y  # For baremetal, as there's no headers to copy,
-                            # we copy an empty directory. So, who cares?
+            copy_minimal_sysroot=y  # For baremetal, as there's no minimal sysroot to copy,
+                                    # we copy some empty directories. So, who cares?
             ;;
         shared)
             extra_config+=("--enable-shared")
-            copy_headers=y
+            copy_minimal_sysroot=y
             ;;
         baremetal)
             extra_config+=("--with-newlib")
             extra_config+=("--enable-threads=no")
             extra_config+=("--disable-shared")
-            copy_headers=n
+            copy_minimal_sysroot=n
             ;;
         *)
             CT_Abort "Internal Error: 'mode' must be one of: 'static', 'shared' or 'baremetal', not '${mode:-(empty)}'"
@@ -197,9 +198,14 @@ do_llvmgcc_core_backend() {
         [ -n "${CT_TOOLCHAIN_BUGURL}" ] && extra_config+=("--with-bugurl=${CT_TOOLCHAIN_BUGURL}")
     fi
 
-    if [ "${copy_headers}" = "y" ]; then
-        CT_DoLog DEBUG "Copying headers to install area of bootstrap gcc, so it can build libgcc2"
-        CT_DoExecLog ALL cp -a "${CT_HEADERS_DIR}" "${prefix}/${CT_TARGET}/include"
+    if [ "${copy_minimal_sysroot}" = "y" ]; then
+        CT_DoLog DEBUG "Copying headers and libs to install area of bootstrap gcc, so it can build libgcc2"
+        CT_Pushd "${CT_SYSROOT_DIR}"
+        sysroot_dirs=$(find -mindepth 1 -maxdepth 1 -type d \( -name "lib*" -or -name "include" \) -printf '%f\n')
+        for sysroot_dir in $sysroot_dirs; do
+          CT_DoExecLog ALL cp -a "${CT_SYSROOT_DIR}/${sysroot_dir}" "${prefix}/${CT_TARGET}/${sysroot_dir}"
+        done
+        CT_Popd
     fi
 
     for tmp in ARCH ABI CPU TUNE FPU FLOAT; do
diff --git a/scripts/build/libc/glibc-eglibc.sh-common b/scripts/build/libc/glibc-eglibc.sh-common
index b9c55cb..61d7449 100644
--- a/scripts/build/libc/glibc-eglibc.sh-common
+++ b/scripts/build/libc/glibc-eglibc.sh-common
@@ -76,6 +76,9 @@ do_libc_backend() {
     local multilib
     local multi_dir
     local multi_flags
+    local multi_arch
+    local native_arch
+    local rest_of_triplet
     local extra_dir
     local libc_headers libc_startfiles libc_full
     local hdr
@@ -85,6 +88,9 @@ do_libc_backend() {
         eval "${arg// /\\ }"
     done
 
+    native_arch=$(echo "${CT_TARGET}" | ${sed} "s,\(^[^\-]*\).*,\1,g")
+    rest_of_triplet=$(echo "${CT_TARGET}" | ${sed} "s,^[^\-]*\(.*\),\1,g")
+
     case "${libc_mode}" in
         startfiles)
             CT_DoStep INFO "Installing C library headers & start files"
@@ -104,6 +110,7 @@ do_libc_backend() {
     # If gcc is not configured for multilib, it still prints
     # a single line for the default settings
     multilibs=( $("${CT_TARGET}-gcc" -print-multi-lib 2>/dev/null) )
+    multi_arch="${native_arch}"
     for multilib in "${multilibs[@]}"; do
         multi_dir="${multilib%%;*}"
         if [ "${multi_dir}" != "." ]; then
@@ -114,6 +121,14 @@ do_libc_backend() {
                           )"
             extra_dir="/${multi_dir}"
 
+            # If more substitutions are needed then they
+            # should be added here, AArch64 for example?
+            if [ "${extra_flags}" = " -m32" ]; then
+              multi_arch=${native_arch/x86_64/i686}
+            elif [ "${extra_flags}" = " -m64" ]; then
+              multi_arch=${native_arch/i686/x86_64}
+            fi
+
             # glibc install its files in ${extra_dir}/{usr/,}lib
             # while gcc expects them in {,usr/}lib/${extra_dir}.
             # Prepare some symlinks so glibc installs in fact in
@@ -140,36 +155,15 @@ do_libc_backend() {
 
         CT_mkdir_pushd "${CT_BUILD_DIR}/build-libc-${libc_mode}${extra_dir//\//_}"
 
-        do_libc_backend_once extra_dir="${extra_dir}"               \
-                             extra_flags="${extra_flags}"           \
-                             libc_headers="${libc_headers}"         \
-                             libc_startfiles="${libc_startfiles}"   \
+        do_libc_backend_once extra_dir="${extra_dir}"                           \
+                             extra_flags="${extra_flags}"                       \
+                             libc_headers="${libc_headers}"                     \
+                             libc_startfiles="${libc_startfiles}"               \
+                             libc_triplet="${multi_arch}${rest_of_triplet}"     \
                              libc_full="${libc_full}"
 
         CT_Popd
 
-        if [ "${multi_dir}" != "." ]; then
-            if [ "${libc_mode}" = "final" ]; then
-                CT_DoLog EXTRA "Fixing up multilib location"
-
-                # rewrite the library multiplexers
-                for d in "lib/${multi_dir}" "usr/lib/${multi_dir}"; do
-                    for l in libc libpthread libgcc_s; do
-                        if [    -f "${CT_SYSROOT_DIR}/${d}/${l}.so"    \
-                             -a ! -L ${CT_SYSROOT_DIR}/${d}/${l}.so    ]
-                        then
-                            CT_DoExecLog DEBUG ${sed} -r -i                                 \
-                                                      -e "s:/lib/:/lib/${multi_dir}/:g;"    \
-                                                      "${CT_SYSROOT_DIR}/${d}/${l}.so"
-                        fi
-                    done
-                done
-                # Remove the multi_dir now it is no longer useful
-                CT_DoExecLog DEBUG rm -rf "${CT_SYSROOT_DIR}/${multi_dir}"
-            fi # libc_mode == final
-
-            CT_EndStep
-        fi
     done
 
     CT_EndStep
@@ -180,6 +174,7 @@ do_libc_backend() {
 #   Parameter           : Definition                            : Type      : Default
 #   libc_headers        : Build libc headers                    : bool      : n
 #   libc_startfiles     : Build libc start-files                : bool      : n
+#   libc_triplet        : Build libc triplet                    : string    : ${CT_TARGET}
 #   libc_full           : Build full libc                       : bool      : n
 #   extra_flags         : Extra CFLAGS to use (for multilib)    : string    : (empty)
 #   extra_dir           : Extra subdir for multilib             : string    : (empty)
@@ -189,6 +184,8 @@ do_libc_backend_once() {
     local libc_full
     local extra_flags
     local extra_dir
+    local extraos_dir
+    local lib_dir
     local src_dir="${CT_SRC_DIR}/${CT_LIBC}-${CT_LIBC_VERSION}"
     local extra_cc_args
     local -a extra_config
@@ -196,6 +193,7 @@ do_libc_backend_once() {
     local glibc_cflags
     local float_extra
     local endian_extra
+    local libc_triplet="${CT_TARGET}"
     local arg
 
     for arg in "$@"; do
@@ -328,6 +326,28 @@ do_libc_backend_once() {
     # or even after they get installed...
     echo "ac_cv_path_BASH_SHELL=/bin/bash" >>config.cache
 
+    # GCC makes the distinction between multilib directories
+    # (gotten via -print-multilib or -print-multi-directory)
+    # and multilib-os directories (via -print-multi-os-directory)
+    # They are also often horribly mis-aligned, such as:
+    # multilib:    -m32=32      -m64=.
+    # multilib-os: -m32=../lib  -m64=../lib64
+    # it is important that multilib sub-folders of the sysroot use
+    # the multilib-os directory and *not* the multilib directory.
+    # The multilib directory is a GCC implementation detail rather
+    # than something that users need to be concerned about. Older
+    # GCCs do not understand -print-multi-os-directory so we fall
+    # back on some simple transformations (that are wrong in the
+    # above example!)
+    if "${cross_cc}" -print-multi-os-directory ${extra_cc_args} > /dev/null 2>&1; then
+        extraos_dir="${CT_HEADERS_DIR}/"$("${cross_cc}" -print-multi-os-directory ${extra_cc_args})
+    else
+        # maintain the previous behaviour if -print-multi-os-directory doesn't work.
+        extraos_dir="${CT_HEADERS_DIR}/../${extra_dir}/usr/lib"
+    fi
+    # Everything after 'include/../' is passed to configure as --libdir=/usr/${lib_dir}
+    lib_dir=$(echo "$extraos_dir" | "${sed}" -r -e 's|^.*include/\.\./||')
+
     # Configure with --prefix the way we want it on the target...
     # There are a whole lot of settings here.  You'll probably want
     # to read up on what they all mean, and customize a bit, possibly by setting GLIBC_EXTRA_CONFIG_ARRAY
@@ -338,11 +358,13 @@ do_libc_backend_once() {
     # Run explicitly through CONFIG_SHELL, or the build breaks badly (loop-of-death)
     # when the shell is not bash... Sigh... :-(
 
-    CT_DoLog DEBUG "Using gcc for target    : '${cross_cc}'"
-    CT_DoLog DEBUG "Configuring with addons : '$(do_libc_add_ons_list ,)'"
-    CT_DoLog DEBUG "Extra config args passed: '${extra_config[*]}'"
-    CT_DoLog DEBUG "Extra CC args passed    : '${glibc_cflags}'"
-    CT_DoLog DEBUG "Extra flags (multilib)  : '${extra_flags}'"
+    CT_DoLog DEBUG "Using gcc for target     : '${cross_cc}'"
+    CT_DoLog DEBUG "Configuring with addons  : '$(do_libc_add_ons_list ,)'"
+    CT_DoLog DEBUG "Extra config args passed : '${extra_config[*]}'"
+    CT_DoLog DEBUG "Extra CC args passed     : '${glibc_cflags}'"
+    CT_DoLog DEBUG "Extra flags (multilib)   : '${extra_flags}'"
+    CT_DoLog DEBUG "Multilib os dir          : '${extraos_dir}'"
+    CT_DoLog DEBUG "Configuring with --libdir: '${lib_dir}'"
 
     CT_DoExecLog CFG                                                \
     BUILD_CC="${CT_BUILD}-gcc"                                      \
@@ -354,12 +376,13 @@ do_libc_backend_once() {
     "${src_dir}/configure"                                          \
         --prefix=/usr                                               \
         --build=${CT_BUILD}                                         \
-        --host=${CT_TARGET}                                         \
+        --host=${libc_triplet}                                      \
         --cache-file="$(pwd)/config.cache"                          \
         --without-cvs                                               \
         --disable-profile                                           \
         --without-gd                                                \
         --with-headers="${CT_HEADERS_DIR}"                          \
+        --libdir=/usr/${lib_dir}                                    \
         "${extra_config[@]}"                                        \
         "${CT_LIBC_GLIBC_EXTRA_CONFIG_ARRAY[@]}"
 
@@ -378,7 +401,7 @@ do_libc_backend_once() {
         # use the 'install-headers' makefile target to install the
         # headers
         CT_DoExecLog ALL make ${JOBSFLAGS}                          \
-                         install_root=${CT_SYSROOT_DIR}${extra_dir} \
+                         install_root="${CT_SYSROOT_DIR}"           \
                          install-bootstrap-headers=yes              \
                          "${extra_make_args[@]}"                    \
                          install-headers
@@ -427,22 +450,23 @@ do_libc_backend_once() {
 
             # there are a few object files needed to link shared libraries,
             # which we build and install by hand
-            CT_DoExecLog ALL mkdir -p "${CT_SYSROOT_DIR}${extra_dir}/usr/lib"
+            CT_DoExecLog ALL mkdir -p "${extraos_dir}"
             CT_DoExecLog ALL make ${JOBSFLAGS}  \
                         "${extra_make_args[@]}" \
                         csu/subdir_lib
             CT_DoExecLog ALL cp csu/crt1.o csu/crti.o csu/crtn.o    \
-                                "${CT_SYSROOT_DIR}${extra_dir}/usr/lib"
+                                "${extraos_dir}"
 
             # Finally, 'libgcc_s.so' requires a 'libc.so' to link against.
             # However, since we will never actually execute its code,
             # it doesn't matter what it contains.  So, treating '/dev/null'
             # as a C source file, we produce a dummy 'libc.so' in one step
-            CT_DoExecLog ALL "${cross_cc}" -nostdlib        \
+            CT_DoExecLog ALL "${cross_cc}" ${extra_flags}   \
+                                            -nostdlib       \
                                            -nostartfiles    \
                                            -shared          \
                                            -x c /dev/null   \
-                                           -o "${CT_SYSROOT_DIR}${extra_dir}/usr/lib/libc.so"
+                                           -o "${extraos_dir}/libc.so"
         fi # threads == nptl
     fi # libc_headers == y
 
@@ -453,9 +477,9 @@ do_libc_backend_once() {
                               all
 
         CT_DoLog EXTRA "Installing C library"
-        CT_DoExecLog ALL make ${JOBSFLAGS}                                  \
-                              "${extra_make_args[@]}"                       \
-                              install_root="${CT_SYSROOT_DIR}${extra_dir}"  \
+        CT_DoExecLog ALL make ${JOBSFLAGS}                       \
+                              "${extra_make_args[@]}"            \
+                              install_root="${CT_SYSROOT_DIR}"   \
                               install
 
         if [ "${CT_BUILD_MANUALS}" = "y" ]; then
diff --git a/scripts/crosstool-NG.sh.in b/scripts/crosstool-NG.sh.in
index 3c98b8c..5a24439 100644
--- a/scripts/crosstool-NG.sh.in
+++ b/scripts/crosstool-NG.sh.in
@@ -338,22 +338,25 @@ if [ -z "${CT_RESTART}" ]; then
         CT_Popd
     fi
 
-    # Since we're *not* multilib on the target side, we want all the
-    # libraries to end up in "lib".  We create "lib64" (for 64-bit
+    # If we are *not* multilib on the target side, we want all the
+    # libraries to end up in "lib".  So create "lib64" (for 64-bit
     # build or host architectures) and "lib32" (for 32-bit emulation
     # on 64-bit) as symlinks to "lib".
     #
     # Not all of these symlinks are necessary, but better safe than
     # sorry. They are summarily removed by build/internals.sh:do_finish.
-    for d in                            \
-        "${CT_PREFIX_DIR}"              \
-        "${CT_SYSROOT_DIR}"             \
-        "${CT_SYSROOT_DIR}/usr"         \
-        "${CT_PREFIX_DIR}/${CT_TARGET}" \
-    ; do
-        CT_DoExecLog ALL ln -sf "lib" "${d}/lib32"
-        CT_DoExecLog ALL ln -sf "lib" "${d}/lib64"
-    done
+    if [ "${CT_MULTILIB}" = "n" ]; then
+        for d in                            \
+            "${CT_PREFIX_DIR}"              \
+            "${CT_SYSROOT_DIR}"             \
+            "${CT_SYSROOT_DIR}/usr"         \
+            "${CT_PREFIX_DIR}/${CT_TARGET}" \
+        ; do
+            CT_DoExecLog ALL ln -sf "lib" "${d}/lib32"
+            CT_DoExecLog ALL ln -sf "lib" "${d}/lib64"
+        done
+    fi
+
 
     # Determine build system if not set by the user
     if [ -z "${CT_BUILD}" ]; then
-- 
1.8.4.2


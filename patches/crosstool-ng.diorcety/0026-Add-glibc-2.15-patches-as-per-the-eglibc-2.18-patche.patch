From 7d87422fa7eaf74e31878452ef91e8ecbb938f4e Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 22 Jan 2014 00:25:39 +0000
Subject: [PATCH 26/36] Add glibc 2.15 patches as per the eglibc-2.18 patches

---
 patches/glibc/2.15/100-make-4.patch                |  24 ++
 .../110-Fix-crossrpc-to-build-on-non-Linux.patch   | 247 +++++++++++++++++++++
 .../2.15/120-MSYS-Hack-elf-librtld.mk-gen.patch    |  62 ++++++
 ...ame-oS-to-oSTATIC-for-case-insensitive-fs.patch | 201 +++++++++++++++++
 patches/glibc/2.15/140-MSYS-Hack-force-ln-s.patch  |  39 ++++
 5 files changed, 573 insertions(+)
 create mode 100644 patches/glibc/2.15/100-make-4.patch
 create mode 100644 patches/glibc/2.15/110-Fix-crossrpc-to-build-on-non-Linux.patch
 create mode 100644 patches/glibc/2.15/120-MSYS-Hack-elf-librtld.mk-gen.patch
 create mode 100644 patches/glibc/2.15/130-Rename-oS-to-oSTATIC-for-case-insensitive-fs.patch
 create mode 100644 patches/glibc/2.15/140-MSYS-Hack-force-ln-s.patch

diff --git a/patches/glibc/2.15/100-make-4.patch b/patches/glibc/2.15/100-make-4.patch
new file mode 100644
index 0000000..ce3d287
--- /dev/null
+++ b/patches/glibc/2.15/100-make-4.patch
@@ -0,0 +1,24 @@
+diff -urN a/configure b/configure
+--- a/configure	2014-01-21 23:50:44.016421900 +0000
++++ b/configure	2014-01-21 23:51:02.548775200 +0000
+@@ -4985,7 +4985,7 @@
+   ac_prog_version=`$MAKE --version 2>&1 | sed -n 's/^.*GNU Make[^0-9]*\([0-9][0-9.]*\).*$/\1/p'`
+   case $ac_prog_version in
+     '') ac_prog_version="v. ?.??, bad"; ac_verc_fail=yes;;
+-    3.79* | 3.[89]*)
++    3.79* | 3.[89]* | 4.*)
+        ac_prog_version="$ac_prog_version, ok"; ac_verc_fail=no;;
+     *) ac_prog_version="$ac_prog_version, bad"; ac_verc_fail=yes;;
+ 
+diff -urN a/configure.in b/configure.in
+--- a/configure.in	2014-01-21 23:50:44.016922000 +0000
++++ b/configure.in	2014-01-21 23:51:02.554776000 +0000
+@@ -1004,7 +1004,7 @@
+   critic_missing="$critic_missing gcc")
+ AC_CHECK_PROG_VER(MAKE, gnumake gmake make, --version,
+   [GNU Make[^0-9]*\([0-9][0-9.]*\)],
+-  [3.79* | 3.[89]*], critic_missing="$critic_missing make")
++  [3.79* | 3.[89]* | 4.*], critic_missing="$critic_missing make")
+ 
+ AC_CHECK_PROG_VER(MSGFMT, gnumsgfmt gmsgfmt msgfmt, --version,
+   [GNU gettext.* \([0-9]*\.[0-9.]*\)],
diff --git a/patches/glibc/2.15/110-Fix-crossrpc-to-build-on-non-Linux.patch b/patches/glibc/2.15/110-Fix-crossrpc-to-build-on-non-Linux.patch
new file mode 100644
index 0000000..4e73cfd
--- /dev/null
+++ b/patches/glibc/2.15/110-Fix-crossrpc-to-build-on-non-Linux.patch
@@ -0,0 +1,247 @@
+diff -urN a/sunrpc/rpc/types.h b/sunrpc/rpc/types.h
+--- a/sunrpc/rpc/types.h	2014-01-21 23:51:42.464843900 +0000
++++ b/sunrpc/rpc/types.h	2014-01-21 23:52:04.934197200 +0000
+@@ -69,6 +69,7 @@
+ #include <sys/types.h>
+ #endif
+ 
++#ifdef __linux__
+ #ifndef __u_char_defined
+ typedef __u_char u_char;
+ typedef __u_short u_short;
+@@ -84,11 +85,14 @@
+ typedef __caddr_t caddr_t;
+ # define __daddr_t_defined
+ #endif
++#endif
+ 
+ #include <sys/time.h>
+ #include <sys/param.h>
+ 
++#ifndef _WIN32
+ #include <netinet/in.h>
++#endif
+ 
+ #ifndef INADDR_LOOPBACK
+ #define       INADDR_LOOPBACK         (u_long)0x7F000001
+diff -urN a/sunrpc/rpc_main.c b/sunrpc/rpc_main.c
+--- a/sunrpc/rpc_main.c	2014-01-21 23:51:42.473845100 +0000
++++ b/sunrpc/rpc_main.c	2014-01-21 23:55:41.416186900 +0000
+@@ -38,13 +38,19 @@
+ #include <stdio.h>
+ #include <string.h>
+ #include <unistd.h>
++#ifndef IS_IN_build
+ #include <libintl.h>
++#endif
+ #include <ctype.h>
+ #include <sys/types.h>
+ #include <sys/param.h>
+ #include <sys/file.h>
+ #include <sys/stat.h>
++#ifndef _WIN32
+ #include <sys/wait.h>
++#else
++#include <windows.h>
++#endif
+ #include "rpc_parse.h"
+ #include "rpc_util.h"
+ #include "rpc_scan.h"
+@@ -53,6 +59,33 @@
+ #include "../version.h"
+ #define PACKAGE _libc_intl_domainname
+ 
++#ifdef _WIN32
++#define rindex(_dest, _src) strrchr((_dest), (_src))
++
++char* __cdecl stpcpy(char* __restrict__ dest, char const* __restrict__ src);
++
++char* __cdecl stpcpy(char* __restrict__ dest, char const* __restrict__ src)
++{
++  if (src == NULL)
++      return NULL;
++  return strcpy(dest, src) + strlen(dest);
++}
++#endif /* _WIN32 */
++
++#if defined(_WIN32) || defined(__BSD__)
++
++char* __cdecl stpncpy(char* __restrict__ dest, char const* __restrict__ src, size_t len);
++
++char* __cdecl stpncpy(char* __restrict__ dest, char const* __restrict__ src, size_t len)
++{
++  size_t min_len = strlen(src);
++  if (min_len > len)
++    min_len = len;
++  return strncpy(dest, src, len) + min_len;
++}
++
++#endif /* defined(_WIN32) || defined(__BSD__) */
++
+ #define EXTEND	1		/* alias for TRUE */
+ #define DONT_EXTEND	0	/* alias for FALSE */
+ 
+@@ -83,7 +116,11 @@
+ static const char *CPP = SUNOS_CPP;
+ static const char CPPFLAGS[] = "-C";
+ static char *pathbuf;
++#ifdef _WIN32
++static HANDLE cpp_pid;
++#else
+ static int cpp_pid;
++#endif
+ static const char *allv[] =
+ {
+   "rpcgen", "-s", "udp", "-s", "tcp"
+@@ -335,6 +372,20 @@
+ {
+   struct stat buf;
+ 
++  /* Avoid trying to directly execute a bash script on Windows. */
++#ifdef _WIN32
++  char* CPPENVV = getenv("CPP");
++  if (CPPENVV)
++    {
++      CPP = (char*)malloc(strlen(CPPENVV)+1);
++      strcpy((char*)CPP, CPPENVV);
++      /* Don't bother checking that it exists with stat64 as
++       * we'd have to check in the path, also it usually ends
++       * with a few arguments. */
++      return;
++    }
++#endif
++
+   if (stat (CPP, &buf) < 0)
+     {				/* /lib/cpp or explicit cpp does not exist */
+       if (cppDefined)
+@@ -354,9 +405,122 @@
+     }
+ }
+ 
++#ifdef _WIN32
++/*
++ * Open input file with given define for C-preprocessor
++ */
++static void
++open_input (const char *infile, const char *define)
++{
++  int argi;
++  int argcc = 0;
++  LPSTR argsall;
++  HANDLE StdOutHandle;
++  HANDLE StdErrHandle;
++  HANDLE ReadPipe;
++  HANDLE WritePipe;
++  SECURITY_ATTRIBUTES SecAttr;
++  STARTUPINFO StartupInfo;
++  PROCESS_INFORMATION ProcessInfo;
++  DWORD Status;
++
++  find_cpp ();
++  putarg (0, CPP);
++  putarg (1, CPPFLAGS);
++  addarg (define);
++  if (infile)
++    addarg (infile);
++  addarg ((char *) NULL);
++  for (argi = 0; argi < argcount - 1; ++argi)
++    {
++      argcc += strlen(arglist[argi])+2;
++    }
++  argsall = (LPSTR)alloca(argcc + 1);
++  if (!argsall)
++    {
++      fprintf (stderr, _ ("cannot alloca for argsall\n"));
++      exit (1);
++    }
++  argsall[0] = '\0';
++  for (argi = 0; argi < argcount - 1; ++argi)
++    {
++      strcat((char*)argsall, arglist[argi]);
++      strcat((char*)argsall, " ");
++    }
++
++  memset(&SecAttr,     0, sizeof(SecAttr));
++  memset(&StartupInfo, 0, sizeof(StartupInfo));
++  memset(&ProcessInfo, 0, sizeof(ProcessInfo));
++
++  SecAttr.nLength = sizeof(SecAttr);
++  SecAttr.bInheritHandle = TRUE;
++
++  Status = CreatePipe( &ReadPipe, &WritePipe, &SecAttr, 0 );
++  if (!Status)
++    {
++      fprintf (stderr, _ ("cannot CreatePipe: GetLastError() -> %d\n"), GetLastError());
++      exit (1);
++    }
++
++  SetHandleInformation( ReadPipe, HANDLE_FLAG_INHERIT, 0 );
++
++  /*
++  StdOutHandle = GetStdHandle( STD_OUTPUT_HANDLE );
++  StdErrHandle = GetStdHandle( STD_ERROR_HANDLE );
++  if (StdOutHandle != INVALID_HANDLE_VALUE) {
++      SetHandleInformation( StdOutHandle, HANDLE_FLAG_INHERIT, 0 );
++  }
++  if (StdErrHandle != INVALID_HANDLE_VALUE) {
++      SetHandleInformation( StdErrHandle, HANDLE_FLAG_INHERIT, 0 );
++  }
++  */
++
++  StartupInfo.cb         = sizeof(StartupInfo);
++  StartupInfo.hStdInput  = GetStdHandle( STD_INPUT_HANDLE );
++  StartupInfo.hStdOutput = WritePipe;
++  StartupInfo.hStdError  = GetStdHandle( STD_ERROR_HANDLE );
++  StartupInfo.dwFlags    = STARTF_USESTDHANDLES;
++
++  Status = CreateProcess(
++          NULL,           /* lpApplicationName */
++          argsall,        /* lpCommandLine */
++          NULL,           /* lpProcessAttributes */
++          NULL,           /* lpThreadAttributes */
++          TRUE,           /* bInheritHandles */
++          0,              /* dwCreationFlags */
++          NULL,           /* lpEnvironment */
++          NULL,           /* lpCurrentDirectory */
++          &StartupInfo,   /* lpStartupInfo */
++          &ProcessInfo ); /* lpProcessInformation */
++
++  CloseHandle( WritePipe );
++  if (!Status)
++    {
++      fprintf (stderr, _ ("cannot find C preprocessor: %s, GetLastError() -> %d\n"), CPP, GetLastError());
++      exit (1);
++    }
++  int fd = _open_osfhandle((intptr_t)ReadPipe, _O_APPEND | _O_RDONLY);
++  if(fd != -1)
++    {
++      fin = _fdopen(fd, "a+");
++    }
++  cpp_pid = ProcessInfo.hProcess;
++}
++
++/* Close the connection to the C-preprocessor and check for successfull
++   termination.  */
++static void
++close_input (void)
++{
++  WaitForSingleObject(cpp_pid, INFINITE);
++}
++
++#else
++
+ /*
+  * Open input file with given define for C-preprocessor
+  */
++
+ static void
+ open_input (const char *infile, const char *define)
+ {
+@@ -424,6 +588,7 @@
+       crash ();
+     }
+ }
++#endif
+ 
+ /* valid tirpc nettypes */
+ static const char *valid_ti_nettypes[] =
diff --git a/patches/glibc/2.15/120-MSYS-Hack-elf-librtld.mk-gen.patch b/patches/glibc/2.15/120-MSYS-Hack-elf-librtld.mk-gen.patch
new file mode 100644
index 0000000..1870ea1
--- /dev/null
+++ b/patches/glibc/2.15/120-MSYS-Hack-elf-librtld.mk-gen.patch
@@ -0,0 +1,62 @@
+diff -urN a/elf/Makefile b/elf/Makefile
+--- a/elf/Makefile	2014-01-21 23:56:27.630555400 +0000
++++ b/elf/Makefile	2014-01-21 23:56:49.628848800 +0000
+@@ -145,6 +145,14 @@
+ ld-map		= $(common-objpfx)ld.map
+ endif
+ 
++# Hack for building on MSYS2 but using native host (e.g. MinGW-w64) compilers.
++uname_o := $(shell uname -o)
++ifneq (, $(findstring Msys, $(uname_o)))
++common-objpfxh = $(shell cd $(common-objpfx); pwd -W)/
++else
++common-objpfxh = $(common-objpfx)
++endif
++
+ ifeq (yes,$(build-shared))
+ extra-objs	= $(all-rtld-routines:%=%.os) soinit.os sofini.os interp.os
+ generated	+= librtld.os dl-allobjs.os ld.so ldd
+@@ -381,15 +389,15 @@
+ 
+ $(objpfx)librtld.mk: $(objpfx)librtld.map Makefile
+ 	LC_ALL=C \
+-	sed -n 's@^$(common-objpfx)\([^(]*\)(\([^)]*\.os\)) *.*$$@\1 \2@p' \
++	sed -n 's@^$(common-objpfxh)\([^(]*\)(\([^)]*\.os\)) *.*$$@\1 \2@p' \
+ 	    $< | \
+ 	while read lib file; do \
+ 	  case $$lib in \
+ 	  libc_pic.a) \
+ 	    LC_ALL=C fgrep -l /$$file \
+-		  $(common-objpfx)stamp.os $(common-objpfx)*/stamp.os | \
++		  $(common-objpfxh)stamp.os $(common-objpfxh)*/stamp.os | \
+ 	    LC_ALL=C \
+-	    sed 's@^$(common-objpfx)\([^/]*\)/stamp\.os$$@rtld-\1'" +=$$file@"\
++	    sed 's@^$(common-objpfxh)\([^/]*\)/stamp\.os$$@rtld-\1'" +=$$file@"\
+ 	    ;; \
+ 	  */*.a) \
+ 	    echo rtld-$${lib%%/*} += $$file ;; \
+diff -urN a/elf/Makerules b/elf/Makerules
+--- a/Makerules	2014-02-21 22:05:14.105893700 +0000
++++ b/Makerules	2014-02-22 01:05:14.435886700 +0000
+@@ -398,11 +398,19 @@
+ mv -f $(@:.d=.T) $@ $(generate-md5)
+ endef
+ 
++# Hack for building on MSYS2 but using native host (e.g. MinGW-w64) compilers.
++uname_o := $(shell uname -o)
++ifneq (, $(findstring Msys, $(uname_o)))
++common-objpfxh = $(shell cd $(common-objpfx); pwd -W)/
++else
++common-objpfxh = $(common-objpfx)
++endif
++
+ ifneq (,$(objpfx))
+ # Continuation lines here are dangerous because they introduce spaces!
+ define sed-remove-objpfx
+--e 's@ $(subst .,\.,$(subst @,\@,$(common-objpfx)))@ $$(common-objpfx)@g' \
+--e 's@^$(subst .,\.,$(subst @,\@,$(common-objpfx)))@$$(common-objpfx)@g'
++-e 's@ $(subst .,\.,$(subst @,\@,$(common-objpfxh)))@ $$(common-objpfxh)@g' \
++-e 's@^$(subst .,\.,$(subst @,\@,$(common-objpfxh)))@$$(common-objpfxh)@g'
+ endef
+ endif
+ 
diff --git a/patches/glibc/2.15/130-Rename-oS-to-oSTATIC-for-case-insensitive-fs.patch b/patches/glibc/2.15/130-Rename-oS-to-oSTATIC-for-case-insensitive-fs.patch
new file mode 100644
index 0000000..0cc0307
--- /dev/null
+++ b/patches/glibc/2.15/130-Rename-oS-to-oSTATIC-for-case-insensitive-fs.patch
@@ -0,0 +1,201 @@
+diff -urN a/ChangeLog b/ChangeLog
+--- a/ChangeLog	2014-02-22 01:19:33.566482400 +0000
++++ b/ChangeLog	2014-02-22 01:20:23.628339500 +0000
+@@ -1,3 +1,8 @@
++2014-01-22  Ray Donnelly  <mingw.android@gmail.com>
++
++        * Rename .oS to .oSTATIC so that builds can be done on file
++        systems that are not both case sensitive and case preserving.
++
+ 2013-01-25  Thomas Schwinge  <thomas@codesourcery.com>
+ 
+         * configure.in (AC_PROG_CPP): New definition.
+diff -urN a/extra-lib.mk b/extra-lib.mk
+--- a/extra-lib.mk	2014-02-22 01:19:33.837016800 +0000
++++ b/extra-lib.mk	2014-02-22 01:20:23.630839800 +0000
+@@ -13,7 +13,7 @@
+ 
+ ifneq (,$($(lib)-static-only-routines))
+ ifneq (,$(filter yesyes%,$(build-shared)$(elf)$($(lib).so-version)))
+-object-suffixes-$(lib) += $(filter-out $($(lib)-inhibit-o),.oS)
++object-suffixes-$(lib) += $(filter-out $($(lib)-inhibit-o),.oSTATIC)
+ endif
+ endif
+ 
+@@ -29,7 +29,7 @@
+ 
+ # Add each flavor of library to the lists of things to build and install.
+ install-lib += $(foreach o,$(object-suffixes-$(lib)),$(lib:lib%=$(libtype$o)))
+-extra-objs += $(foreach o,$(filter-out .os .oS,$(object-suffixes-$(lib))),\
++extra-objs += $(foreach o,$(filter-out .os .oSTATIC,$(object-suffixes-$(lib))),\
+ 			$(patsubst %,%$o,$(filter-out \
+ 					   $($(lib)-shared-only-routines),\
+ 					   $(all-$(lib)-routines))))
+@@ -57,7 +57,7 @@
+ 
+ 
+ # Use o-iterator.mk to generate a rule for each flavor of library.
+-ifneq (,$(filter-out .os .oS,$(object-suffixes-$(lib))))
++ifneq (,$(filter-out .os .oSTATIC,$(object-suffixes-$(lib))))
+ define o-iterator-doit
+ $(objpfx)$(patsubst %,$(libtype$o),$(lib:lib%=%)): \
+   $(patsubst %,$(objpfx)%$o,\
+@@ -65,7 +65,7 @@
+ 			  $(all-$(lib)-routines))); \
+ 	$$(build-extra-lib)
+ endef
+-object-suffixes-left = $(filter-out .os .oS,$(object-suffixes-$(lib)))
++object-suffixes-left = $(filter-out .os .oSTATIC,$(object-suffixes-$(lib)))
+ include $(patsubst %,$(..)o-iterator.mk,$(object-suffixes-left))
+ endif
+ 
+@@ -77,9 +77,9 @@
+ 	$(build-extra-lib)
+ endif
+ 
+-ifneq (,$(filter .oS,$(object-suffixes-$(lib))))
+-$(objpfx)$(patsubst %,$(libtype.oS),$(lib:lib%=%)): \
+-  $(patsubst %,$(objpfx)%.oS,\
++ifneq (,$(filter .oSTATIC,$(object-suffixes-$(lib))))
++$(objpfx)$(patsubst %,$(libtype.oSTATIC),$(lib:lib%=%)): \
++  $(patsubst %,$(objpfx)%.oSTATIC,\
+ 	     $(filter $($(lib)-static-only-routines),\
+ 		      $(all-$(lib)-routines)))
+ 	$(build-extra-lib)
+diff -urN a/Makeconfig b/Makeconfig
+--- a/Makeconfig	2014-02-22 01:19:34.899651700 +0000
++++ b/Makeconfig	2014-02-22 01:20:23.633340100 +0000
+@@ -508,7 +508,7 @@
+ # run the linked programs.
+ link-libc = -Wl,-rpath-link=$(rpath-link) \
+ 	    $(common-objpfx)libc.so$(libc.so-version) \
+-	    $(common-objpfx)$(patsubst %,$(libtype.oS),c) \
++	    $(common-objpfx)$(patsubst %,$(libtype.oSTATIC),c) \
+ 	    $(as-needed) $(common-objpfx)elf/ld.so $(no-as-needed) $(gnulib)
+ # This is how to find at build-time things that will be installed there.
+ rpath-dirs = math elf dlfcn nss nis rt resolv crypt
+@@ -730,7 +730,7 @@
+ # The compilation rules use $(CPPFLAGS-${SUFFIX}) and $(CFLAGS-${SUFFIX})
+ # to pass different flags for each flavor.
+ libtypes = $(foreach o,$(object-suffixes-for-libc),$(libtype$o))
+-all-object-suffixes := .o .os .op .og .ob .oS
++all-object-suffixes := .o .os .op .og .ob .oSTATIC
+ object-suffixes :=
+ CPPFLAGS-.o = $(pic-default)
+ CFLAGS-.o = $(filter %frame-pointer,$(+cflags))
+@@ -790,14 +790,14 @@
+ 
+ ifeq (yes,$(build-shared))
+ # Build special library that contains the static-only routines for libc.
+-object-suffixes-for-libc += .oS
++object-suffixes-for-libc += .oSTATIC
+ 
+ # Must build the routines as PIC, though, because they can end up in (users')
+ # shared objects.  We don't want to use CFLAGS-os because users may, for
+ # example, make that processor-specific.
+-CFLAGS-.oS = $(CFLAGS-.o) $(PIC-ccflag)
+-CPPFLAGS-.oS = $(CPPFLAGS-.o) -DPIC -DLIBC_NONSHARED=1
+-libtype.oS = lib%_nonshared.a
++CFLAGS-.oSTATIC = $(CFLAGS-.o) $(PIC-ccflag)
++CPPFLAGS-.oSTATIC = $(CPPFLAGS-.o) -DPIC -DLIBC_NONSHARED=1
++libtype.oSTATIC = lib%_nonshared.a
+ endif
+ 
+ # The assembler can generate debug information too.
+diff -urN a/Makerules b/Makerules
+--- a/Makerules	2014-02-22 01:19:34.901151900 +0000
++++ b/Makerules	2014-02-22 01:20:23.643841400 +0000
+@@ -162,14 +162,14 @@
+ # We only generate these in the top-level makefile, to avoid any weirdness
+ # from subdir-specific makefile tweaks creeping in on an update.
+ $(common-objpfx)%.make: $(..)%.make.c $(..)Makerules $(common-before-compile)
+-	rm -f $@T $@.dT
++	rm -f $@T $@.dTEMP
+ 	(echo '# Generated from $*.make.c by Makerules.'; \
+ 	 $(CC) $(CFLAGS) $(CPPFLAGS) -E -DASSEMBLER $< \
+-	       -MD -MP -MT '$$(common-objpfx)$*.make' -MF $@.dT \
++	       -MD -MP -MT '$$(common-objpfx)$*.make' -MF $@.dTEMP \
+ 	 | sed -n '/@@@/{s/@@@[	 ]*\(.*\)@@@/\1/;s/[	 ]*$$//p;}'; \
+ 	 echo 'common-generated += $(@F)'; \
+-	 sed $(sed-remove-objpfx) $(sed-remove-dotdot) $@.dT; \
+-	 rm -f $@.dT) > $@T
++	 sed $(sed-remove-objpfx) $(sed-remove-dotdot) $@.dTEMP; \
++	 rm -f $@.dTEMP) > $@T
+ 	mv -f $@T $@
+ endif
+ 
+@@ -426,7 +426,7 @@
+ # Bounded pointer thunks are only built for *.ob
+ elide-bp-thunks = $(addprefix $(bppfx),$(bp-thunks))
+ 
+-elide-routines.oS += $(filter-out $(static-only-routines),\
++elide-routines.oSTATIC += $(filter-out $(static-only-routines),\
+ 				  $(routines) $(aux) $(sysdep_routines)) \
+ 		     $(elide-bp-thunks)
+ elide-routines.os += $(static-only-routines) $(elide-bp-thunks)
+@@ -1019,7 +1019,7 @@
+ install: $(inst_libdir)/libc.so
+ $(inst_libdir)/libc.so: $(common-objpfx)format.lds \
+ 			$(common-objpfx)libc.so$(libc.so-version) \
+-			$(inst_libdir)/$(patsubst %,$(libtype.oS),\
++			$(inst_libdir)/$(patsubst %,$(libtype.oSTATIC),\
+ 						  $(libprefix)$(libc-name)) \
+ 			$(+force)
+ 	(echo '/* GNU ld script';\
+@@ -1027,7 +1027,7 @@
+ 	 echo '   the static library, so try that secondarily.  */';\
+ 	 cat $<; \
+ 	 echo 'GROUP ( $(slibdir)/libc.so$(libc.so-version)' \
+-	      '$(libdir)/$(patsubst %,$(libtype.oS),$(libprefix)$(libc-name))'\
++	      '$(libdir)/$(patsubst %,$(libtype.oSTATIC),$(libprefix)$(libc-name))'\
+ 	      ' AS_NEEDED (' $(slibdir)/$(rtld-installed-name) ') )' \
+ 	) > $@.new
+ 	mv -f $@.new $@
+diff -urN a/nptl/Makefile b/nptl/Makefile
+--- a/nptl/Makefile	2014-02-22 01:19:35.178687100 +0000
++++ b/nptl/Makefile	2014-02-22 01:20:23.638340700 +0000
+@@ -377,7 +377,7 @@
+ 
+ $(inst_libdir)/libpthread.so: $(common-objpfx)format.lds \
+ 			      $(objpfx)libpthread.so$(libpthread.so-version) \
+-			      $(inst_libdir)/$(patsubst %,$(libtype.oS),\
++			      $(inst_libdir)/$(patsubst %,$(libtype.oSTATIC),\
+ 							$(libprefix)pthread) \
+ 			      $(+force)
+ 	(echo '/* GNU ld script';\
+@@ -385,7 +385,7 @@
+ 	 echo '   the static library, so try that secondarily.  */';\
+ 	 cat $<; \
+ 	 echo 'GROUP ( $(slibdir)/libpthread.so$(libpthread.so-version)' \
+-	      '$(libdir)/$(patsubst %,$(libtype.oS),$(libprefix)pthread)'\
++	      '$(libdir)/$(patsubst %,$(libtype.oSTATIC),$(libprefix)pthread)'\
+ 	      ')' \
+ 	) > $@.new
+ 	mv -f $@.new $@
+diff -urN a/sysdeps/i386/i686/Makefile b/sysdeps/i386/i686/Makefile
+--- a/sysdeps/i386/i686/Makefile	2014-02-22 01:19:36.177313900 +0000
++++ b/sysdeps/i386/i686/Makefile	2014-02-22 01:20:23.639840900 +0000
+@@ -16,12 +16,12 @@
+ CFLAGS-.op += -Wa,-mtune=i686
+ CFLAGS-.og += -Wa,-mtune=i686
+ CFLAGS-.ob += -Wa,-mtune=i686
+-CFLAGS-.oS += -Wa,-mtune=i686
++CFLAGS-.oSTATIC += -Wa,-mtune=i686
+ 
+ ASFLAGS-.o += -Wa,-mtune=i686
+ ASFLAGS-.os += -Wa,-mtune=i686
+ ASFLAGS-.op += -Wa,-mtune=i686
+ ASFLAGS-.og += -Wa,-mtune=i686
+ ASFLAGS-.ob += -Wa,-mtune=i686
+-ASFLAGS-.oS += -Wa,-mtune=i686
++ASFLAGS-.oSTATIC += -Wa,-mtune=i686
+ endif
+diff -urN a/sysdeps/sparc/sparc32/sparcv9/Makefile b/sysdeps/sparc/sparc32/sparcv9/Makefile
+--- a/sysdeps/sparc/sparc32/sparcv9/Makefile	2014-02-22 01:19:37.093930300 +0000
++++ b/sysdeps/sparc/sparc32/sparcv9/Makefile	2014-02-22 01:20:23.641341100 +0000
+@@ -10,4 +10,4 @@
+ ASFLAGS-.op += -Wa,-Av9a
+ ASFLAGS-.og += -Wa,-Av9a
+ ASFLAGS-.ob += -Wa,-Av9a
+-ASFLAGS-.oS += -Wa,-Av9a
++ASFLAGS-.oSTATIC += -Wa,-Av9a
diff --git a/patches/glibc/2.15/140-MSYS-Hack-force-ln-s.patch b/patches/glibc/2.15/140-MSYS-Hack-force-ln-s.patch
new file mode 100644
index 0000000..de7d34e
--- /dev/null
+++ b/patches/glibc/2.15/140-MSYS-Hack-force-ln-s.patch
@@ -0,0 +1,39 @@
+diff -urN a/configure b/configure
+--- a/configure	2014-02-22 01:19:33.578483900 +0000
++++ b/configure	2014-02-22 01:22:45.415844200 +0000
+@@ -4475,6 +4475,16 @@
+ $as_echo "no, using $LN_S" >&6; }
+ fi
+ 
++# Even though 'ln -s' doesn't work right in MSYS2, it works enough for
++# eglibc, whereas cp -r doesn't.
++case "$build_os" in
++*mingw*)
++  as_ln_s='ln -s'
++  LN_S=$as_ln_s
++  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Hacked as_ln_s and LN_S to 'ln -s' for MSYS2" >&5
++$as_echo "$as_me: WARNING: Hacked as_ln_s and LN_S to 'ln -s' for MSYS2" >&2;}
++  ;;
++esac
+ 
+ # Was a --with-binutils option given?
+ if test -n "$path_binutils"; then
+diff -urN a/configure.in b/configure.in
+--- a/configure.in	2014-02-22 01:19:33.578984000 +0000
++++ b/configure.in	2014-02-22 01:22:45.421845000 +0000
+@@ -992,6 +992,15 @@
+   INSTALL='\$(..)./scripts/install-sh -c'
+ fi
+ AC_PROG_LN_S
++# Even though 'ln -s' doesn't work right in MSYS2, it works enough for
++# eglibc, whereas cp -r doesn't.
++case "$build_os" in
++*mingw*)
++  as_ln_s='ln -s'
++  LN_S=$as_ln_s
++  AC_MSG_WARN(Hacked as_ln_s and LN_S to 'ln -s' for MSYS2)
++  ;;
++esac
+ 
+ LIBC_PROG_BINUTILS
+ AC_SUBST(MIG)dnl Needed by sysdeps/mach/configure.in
-- 
1.9.2

